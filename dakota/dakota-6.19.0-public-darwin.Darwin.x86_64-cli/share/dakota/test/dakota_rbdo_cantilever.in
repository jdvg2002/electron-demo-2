#@ s0: DakotaConfig=HAVE_DOT
#@ s1: DakotaConfig=HAVE_DOT
#@ s2: DakotaConfig=HAVE_DOT
#@ s3: DakotaConfig=HAVE_DOT
#@ s4: DakotaConfig=HAVE_DOT
#@ s5: DakotaConfig=HAVE_DOT
#@ s6: DakotaConfig=HAVE_DOT
#@ s7: DakotaConfig=HAVE_DOT
#@ s8: DakotaConfig=HAVE_DOT
#@ s9: DakotaConfig=HAVE_DOT
#@ s10: DakotaConfig=HAVE_DOT
#@ s11: DakotaConfig=HAVE_DOT
#@ s12: DakotaConfig=HAVE_DOT
#@ s13: DakotaConfig=HAVE_DOT
#@ s14: DakotaConfig=HAVE_DOT
#@ s15: DakotaConfig=HAVE_DOT
#@ s16: DakotaConfig=HAVE_NPSOL
#@ p0: DakotaConfig=HAVE_NPSOL
#@ p0: MPIProcs=3 CheckOutput='dakota.out.1'

# DAKOTA Input File: dakota_rbdo_cantilever.in
# Bi-level RBDO using the cantilever test function.

environment,
	  method_pointer = 'OPTIM'

###########################
# begin opt specification #
###########################
method,
	id_method = 'OPTIM'
	model_pointer = 'OPTIM_M'
	dot_sqp			#s0,#s1,#s2,#s3,#s4,#s5,#s6,#s7,#s8,#s9,#s10,#s11,#s12,#s13,#s14,#s15
#	npsol_sqp		#s16,#p0 # coverage for method recourse
	  convergence_tolerance = 1.e-6
	  output verbose
	scaling

model,
	id_model = 'OPTIM_M'
	nested
	  variables_pointer  = 'OPTIM_V'
	  sub_method_pointer = 'UQ'
#	    iterator_servers = 3		#p0
	  responses_pointer  = 'OPTIM_R'
	    primary_response_mapping   = 1. 0. 0. 0. 0. 0. 0. 0.
	    secondary_response_mapping = 0. 0. 0. 0. 1. 0. 0. 0.
				         0. 0. 0. 0. 0. 0. 0. 1.

variables,
	id_variables = 'OPTIM_V'
	continuous_design = 2
	  initial_point    2.5    2.5
	  upper_bounds    10.0   10.0
	  lower_bounds     1.0    1.0
	  descriptors 'w' 't'
	scale_type = 'value'
	scales     =       2.5	  2.5

responses,
# minimize mean Weight
# s.t.     p_S/D    <= .00135 Cases 0,1,2,3
# s.t.     beta_S/D >= 3      Cases 4,5,6,7
# s.t.     z_S/D    <= 0.     Cases 8,9,10,11,12,13,14,15
#
# NOTE: This specifies the TOTAL RESPONSE for the optimization,
#       which is a combination of nested & interface responses.
	id_responses = 'OPTIM_R'
	objective_functions = 1
	nonlinear_inequality_constraints = 2
	nonlinear_inequality_upper_bounds = .00135 .00135 #s0,#s1,#s2,#s3
#	nonlinear_inequality_lower_bounds = 3. 3.	  #s4,#s5,#s6,#s7,#s16,#p0
#	nonlinear_inequality_upper_bounds = 1.e+50 1.e+50 #s4,#s5,#s6,#s7,#s16,#p0
	numerical_gradients
	  method_source dakota
	  interval_type central
	  fd_gradient_step_size = 1.e-3
	no_hessians

##########################
# begin UQ specification #
##########################
method,
	id_method = 'UQ'
	model_pointer = 'UQ_M'
	local_reliability #nip
#	  mpp_search x_taylor_mean		#s1,#s5,#s9,#s13
#	  mpp_search x_taylor_mpp		#s2,#s6,#s10,#s14
#	  mpp_search no_approx			#s3,#s7,#s11,#s15,#s16,#p0
	  num_response_levels = 0 1 1	#s0,#s1,#s2,#s3,#s4,#s5,#s6,#s7,#s16,#p0
	  response_levels = 0.0 0.0	#s0,#s1,#s2,#s3,#s4,#s5,#s6,#s7,#s16,#p0
#	  compute reliabilities			#s4,#s5,#s6,#s7,#s16,#p0
#	  num_probability_levels = 0 1 1	#s8,#s9,#s10,#s11
#	  probability_levels = .00135 .00135	#s8,#s9,#s10,#s11
#	  num_reliability_levels = 0 1 1	#s12,#s13,#s14,#s15
#	  reliability_levels = 3. 3.		#s12,#s13,#s14,#s15
# g functions scaled using deterministic opt. conventions:
# g<=0 is safe/feasible, g>0 is failed/violated.  Therefore,
# we desire a complementary cumulative reliability index.
	  complementary distribution

model,
	id_model = 'UQ_M'
	single
	  variables_pointer = 'UQ_V'
	  interface_pointer = 'UQ_I'
	  responses_pointer = 'UQ_R'

variables,
	id_variables = 'UQ_V'
# continuous_design is not required (OUU will augment
# automatically), but it is good form
	continuous_design = 2
	normal_uncertain = 4
	  means             =  40000. 29.E+6 500. 1000.
	  std_deviations    =  2000. 1.45E+6 100. 100.
	  descriptors       =  'R' 'E' 'X' 'Y'

interface,
	id_interface = 'UQ_I'
	direct
	  analysis_driver = 'cantilever'
#	  deactivate evaluation_cache restart_file

responses,
	id_responses = 'UQ_R'
	response_functions = 3
	analytic_gradients
#	numerical_gradients
#	  method_source dakota
#	  interval_type central
#	  fd_gradient_step_size = 1.e-4
	no_hessians
